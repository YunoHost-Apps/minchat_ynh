MINCHAT_VERSION="1.1"
MINCHAT_SOURCE_URL="https://github.com/wojtek77/chat/archive/master.tar.gz"
MINCHAT_SOURCE_SHA256="50e66895cbbda095e02a8a7375ca51c0eb589956f68a223a8217d0f4c1fe1fa6"

QUIET () {  # Redirige la sortie standard dans /dev/null
  $@ > /dev/null
}

ALL_QUIET () {  # Redirige la sortie standard et d'erreur dans /dev/null
  $@ > /dev/null 2>&1
}

CHECK_VAR () {  # Check variable is not empty
# $1 = Checking variable
# $2 = Text to display on error
  test -n "$1" || (echo "$2" >&2 && false)
}

CHECK_PATH () { # Checks / at the beginning of the path. And his absence at the end.
  if [ "${path:0:1}" != "/" ]; then    # If the first character is not /
    path="/$path"    # Add / at the beginning of path
  fi
  if [ "${path:${#path}-1}" == "/" ] && [ ${#path} -gt 1 ]; then    # If the last character is a / and it is not the only character.
    path="${path:0:${#path}-1}" # Delete last character
  fi
}

CHECK_DOMAINPATH () { # Checks the availability of the path and domain.
  sudo yunohost app checkurl $domain$path -a $app
}

CHECK_FINALPATH () {  # Checks that the destination folder is not already in use.
  final_path=/var/www/$app
  if [ -e "$final_path" ]
  then
    echo "This path already contains a folder" >&2
    false
  fi
}

# Substitute a string by another in a file
#
# usage: ynh_substitute_char string_to_find replace_string file_to_analyse
# | arg: string_to_find - String to replace in the file
# | arg: replace_string - New string that will replace
# | arg: file_to_analyse - File where the string will be replaced.
ynh_substitute_char () {
  delimit=@
  match_char=${1//${delimit}/"\\${delimit}"}  # Escape the delimiter if it's in the string.
  replace_char=${2//${delimit}/"\\${delimit}"}
  workfile=$3

  sudo sed --in-place "s${delimit}${match_char}${delimit}${replace_char}${delimit}g" "$workfile"
}

ynh_store_checksum_config () {
  config_file_checksum=checksum_${1//[\/ ]/_} # Replace all '/' and ' ' by '_'
  ynh_app_setting_set $app $config_file_checksum $(sudo md5sum "$1" | cut -d' ' -f1)
}

extract_source() {
  local DESTDIR=$1
    
  # retrieve and extract Minichat tarball
  rc_tarball="${DESTDIR}/master.tar.gz"
  sudo wget -q -O "$rc_tarball" "$MINCHAT_SOURCE_URL" \
    || ynh_die "Unable to download source tarball"
  echo "$MINCHAT_SOURCE_SHA256 $rc_tarball" | sha256sum -c >/dev/null \
    || ynh_die "Invalid checksum of downloaded tarball"
  sudo tar xf "$rc_tarball" -C "$DESTDIR" --strip-components 1 \
    || ynh_die "Unable to extract source tarball"
  sudo rm "$rc_tarball"
}

ynh_nginx_config () {
  finalnginxconf="/etc/nginx/conf.d/$domain.d/$app.conf"
  ynh_compare_checksum_config "$finalnginxconf" 1
  sudo cp ../conf/nginx.conf "$finalnginxconf"

  # To avoid a break by set -u, use a void substitution ${var:-}. If the variable is not set, it's simply set with an empty variable.
  # Substitute in a nginx config file only if the variable is not empty
  if test -n "${path:-}"; then
    ynh_substitute_char "__PATH__" "$path" "$finalnginxconf"
  fi
  if test -n "${domain:-}"; then
    ynh_substitute_char "__DOMAIN__" "$domain" "$finalnginxconf"
  fi
  if test -n "${port:-}"; then
    ynh_substitute_char "__PORT__" "$port" "$finalnginxconf"
  fi
  if test -n "${app:-}"; then
    ynh_substitute_char "__NAME__" "$app" "$finalnginxconf"
  fi
  if test -n "${final_path:-}"; then
    ynh_substitute_char "__FINALPATH__" "$final_path" "$finalnginxconf"
  fi
  ynh_store_checksum_config "$finalnginxconf"

  sudo systemctl reload nginx
}

ynh_store_checksum_config () {
  config_file_checksum=checksum_${1//[\/ ]/_} # Replace all '/' and ' ' by '_'
  ynh_app_setting_set $app $config_file_checksum $(sudo md5sum "$1" | cut -d' ' -f1)
}

ynh_remove_nginx_config () {
  ynh_secure_remove "/etc/nginx/conf.d/$domain.d/$app.conf"
  sudo systemctl reload nginx
}

ynh_fpm_config () {
  finalphpconf="/etc/php5/fpm/pool.d/$app.conf"
  ynh_compare_checksum_config "$finalphpconf" 1
  sudo cp ../conf/php-fpm.conf "$finalphpconf"
  ynh_substitute_char "__NAMETOCHANGE__" "$app" "$finalphpconf"
  ynh_substitute_char "__FINALPATH__" "$final_path" "$finalphpconf"
  ynh_substitute_char "__USER__" "$app" "$finalphpconf"
  sudo chown root: "$finalphpconf"
  ynh_store_checksum_config "$finalphpconf"

  if [ -e "../conf/php-fpm.ini" ]
  then
    finalphpini="/etc/php5/fpm/conf.d/20-$app.ini"
    ynh_compare_checksum_config "$finalphpini" 1
    sudo cp ../conf/php-fpm.ini "$finalphpini"
    sudo chown root: "$finalphpini"
    ynh_store_checksum_config "$finalphpini"
  fi

  sudo systemctl reload php5-fpm
}

ynh_remove_fpm_config () {
  ynh_secure_remove "/etc/php5/fpm/pool.d/$app.conf"
  ynh_secure_remove "/etc/php5/fpm/conf.d/20-$app.ini"
  sudo systemctl reload php5-fpm
}

# Remove a file or a directory securely
#
# usage: ynh_secure_remove path_to_remove
# | arg: path_to_remove - File or directory to remove
ynh_secure_remove () {
  path_to_remove=$1
  forbidden_path=" \
  /var/www \
  /home/yunohost.app"

  if [[ "$forbidden_path" =~ "$path_to_remove" \
    # Match all path or subpath in $forbidden_path
    || "$path_to_remove" =~ ^/[[:alnum:]]+$ \
    # Match all first level path from / (Like /var, /root, etc...)
    || "${path_to_remove:${#path_to_remove}-1}" = "/" ]]
    # Match if the path finish by /. Because it's seems there is an empty variable
  then
    echo "Avoid deleting of $path_to_remove." >&2
  else
    if [ -e "$path_to_remove" ]
    then
      sudo rm -R "$path_to_remove"
    else
      echo "$path_to_remove doesn't deleted because it's not exist." >&2
    fi
  fi
}

# Create a system user
#
# usage: ynh_system_user_create user_name [home_dir]
# | arg: user_name - Name of the system user that will be create
# | arg: home_dir - Path of the home dir for the user. Usually the final path of the app. If this argument is omitted, the user will be created without home
ynh_system_user_create () {
  if ! ynh_system_user_exists "$1"  # Check if the user exists on the system
  then  # If the user doesn't exist
    if [ $# -ge 2 ]; then # If a home dir is mentioned
      user_home_dir="-d $2"
    else
      user_home_dir="--no-create-home"
    fi
    sudo useradd $user_home_dir --system --user-group $1 --shell /usr/sbin/nologin || ynh_die "Unable to create $1 system account"
  fi
}

# Delete a system user
#
# usage: ynh_system_user_delete user_name
# | arg: user_name - Name of the system user that will be create
ynh_system_user_delete () {
    if ynh_system_user_exists "$1"  # Check if the user exists on the system
    then
    echo "Remove the user $1" >&2
    sudo userdel $1
  else
    echo "The user $1 was not found" >&2
    fi
}

ynh_compare_checksum_config () {
  current_config_file=$1
  compress_backup=${2:-0} # If $2 is empty, compress_backup will set at 0
  config_file_checksum=checksum_${current_config_file//[\/ ]/_} # Replace all '/' and ' ' by '_'
  checksum_value=$(ynh_app_setting_get $app $config_file_checksum)
  if [ -n "$checksum_value" ]
  then  # Proceed only if a value was stocked into the app config
    if ! echo "$checksum_value $current_config_file" | md5sum -c --status
    then  # If the checksum is now different
      backup_config_file="$current_config_file.backup.$(date '+%d.%m.%y_%Hh%M,%Ss')"
      if [ compress_backup -eq 1 ]
      then
        sudo tar --create --gzip --file "$backup_config_file.tar.gz" "$current_config_file" # Backup the current config file and compress
        backup_config_file="$backup_config_file.tar.gz"
      else
        sudo cp -a "$current_config_file" "$backup_config_file" # Backup the current config file
      fi
      echo "Config file $current_config_file has been manually modified since the installation or last upgrade. So it has been duplicated in $backup_config_file" >&2
      echo "$backup_config_file"  # Return the name of the backup file
    fi
  fi
}

ynh_backup_fail_upgrade () {
  WARNING echo "Upgrade failed."
  app_bck=${app//_/-} # Replace all '_' by '-'
  if sudo yunohost backup list | grep -q $app_bck-pre-upgrade$backup_number; then # Vérifie l'existence de l'archive avant de supprimer l'application et de restaurer
    sudo yunohost app remove $app # Supprime l'application avant de la restaurer.
    sudo yunohost backup restore --ignore-hooks $app_bck-pre-upgrade$backup_number --apps $app --force  # Restore the backup if upgrade failed
    ynh_die "The app was restored to the way it was before the failed upgrade."
  fi
}

ynh_backup_before_upgrade () {  # Backup the current version of the app, restore it if the upgrade fails
  backup_number=1
  old_backup_number=2
  app_bck=${app//_/-} # Replace all '_' by '-'
  if sudo yunohost backup list | grep -q $app_bck-pre-upgrade1; then  # Vérifie l'existence d'une archive déjà numéroté à 1.
    backup_number=2 # Et passe le numéro de l'archive à 2
    old_backup_number=1
  fi

  sudo yunohost backup create --ignore-hooks --apps $app --name $app_bck-pre-upgrade$backup_number  # Créer un backup différent de celui existant.
  if [ "$?" -eq 0 ]; then # Si le backup est un succès, supprime l'archive précédente.
    if sudo yunohost backup list | grep -q $app_bck-pre-upgrade$old_backup_number; then # Vérifie l'existence de l'ancienne archive avant de la supprimer, pour éviter une erreur.
      QUIET sudo yunohost backup delete $app_bck-pre-upgrade$old_backup_number
    fi
  else  # Si le backup a échoué
    ynh_die "Backup failed, the upgrade process was aborted."
  fi
}

# Manage a fail of the script
#
# Print a warning to inform that the script was failed
# Execute the ynh_clean_setup function if used in the app script
#
# usage of ynh_clean_setup function
# This function provide a way to clean some residual of installation that not managed by remove script.
# To use it, simply add in your script:
# ynh_clean_setup () {
#        instructions...
# }
# This function is optionnal.
#
# Usage: ynh_exit_properly is used only by the helper ynh_check_error.
# You must not use it directly.
ynh_exit_properly () {
  exit_code=$?
  if [ "$exit_code" -eq 0 ]; then
      ynh_die # Exit without error if the script ended correctly
  fi

  trap '' EXIT  # Ignore new exit signals
  set +eu # Do not exit anymore if a command fail or if a variable is empty

  echo -e "!!\n  $app's script has encountered an error. Its execution was cancelled.\n!!" >&2

  if type -t ynh_clean_setup > /dev/null; then  # Check if the function exist in the app script.
    ynh_clean_setup # Call the function to do specific cleaning for the app.
  fi

  ynh_die # Exit with error status
}

# Exit if an error occurs during the execution of the script.
#
# Stop immediatly the execution if an error occured or if a empty variable is used.
# The execution of the script is derivate to ynh_exit_properly function before exit.
#
# Usage: ynh_abort_if_errors
ynh_abort_if_errors () {
  set -eu # Exit if a command fail, and if a variable is used unset.
  trap ynh_exit_properly EXIT # Capturing exit signals on shell script
}